

Para todas as questões, compile-as com o gcc e execute-as via terminal.

1 - Crie um "Olá mundo!" em C.

# include <stdio.h>

int main (){
   printf("Olá mundo!! \n");
   return 0;
}


2 - Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
$ ./ola_usuario_1
$ Digite o seu nome: Eu
$ Ola Eu

# include <stdio.h>

int main (){
   char nome_usuario[10];
   printf("Digite seu nome: ");
   scanf("%s", nome_usuario);
   printf("Olá, %s \n", nome_usuario);
   return 0;
}


3 - Apresente os comportamentos do código anterior nos seguintes casos:
(a) Se o usuário insere mais de um nome.
$ ./ola_usuario_1
$ Digite o seu nome: Eu Mesmo
 - Resposta: Olá, Eu

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
$ ./ola_usuario_1
$ Digite o seu nome: "Eu Mesmo"
 - Resposta: Olá, "Eu

(c) Se é usado um pipe. Por exemplo:
$ echo Eu | ./ola_usuario_1
 - Resposta: Olá, Eu

(d) Se é usado um pipe com mais de um nome. Por exemplo:
$ echo Eu Mesmo | ./ola_usuario_1
 - Resposta: Olá, Eu

(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
$ echo "Eu Mesmo" | ./ola_usuario_1
 - Resposta: Olá, Eu

(f) Se é usado o redirecionamento de arquivo. Por exemplo:
$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_1 < ola.txt
 - Resposta: Olá, Olá


4 - Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
$ ./ola_usuario_2 Eu
$ Ola Eu

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){
	printf (" Ola, %s\n", argv[1]);
	return 0;
}


5 - Apresente os comportamentos do código anterior nos seguintes casos:
(a) Se o usuário insere mais de um nome.
$ ./ola_usuario_2 Eu Mesmo
 - Resposta: Olá, Eu

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
$ ./ola_usuario_2 "Eu Mesmo"
 - Resposta: Olá, Eu Mesmo

(c) Se é usado um pipe. Por exemplo:
$ echo Eu | ./ola_usuario_2
 - Resposta: Olá, (null)

(d) Se é usado um pipe com mais de um nome. Por exemplo:
$ echo Eu Mesmo | ./ola_usuario_2
 - Resposta: Olá, (null)

(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
$ echo "Eu Mesmo" | ./ola_usuario_2
 - Resposta: Olá, (null)

(f) Se é usado o redirecionamento de arquivo. Por exemplo:
$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_2 < ola.txt
 - Resposta: Olá, (null)
 
 
6 - Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
$ ./ola_usuario_3 Eu
$ Ola Eu
$ Numero de entradas = 2

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv) {
	int cont;
	cont = (argc-1);
	printf("Olá, %s\n", argv[1]);
	printf("Número de entradas: %d\n", cont);
	return 0;
}

7 - Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
$ ./ola_argumentos Eu Mesmo e Minha Pessoa
$ Argumentos: Eu Mesmo e Minha Pessoa

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv) {
	int cont;
	cont = (argc-1);
	printf("Olá, ");
	for (cont=1; cont<argc; cont++){
	printf(" %s", argv[cont]);
	}
	printf("\n");
	return 0;
}


8 - Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo: int Num_Caracs(char *string); Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

#include "num_caracs.h"

int Num_Caracs(char *string){
	int cont;
	for(cont=0; string[cont]!='\0'; cont++){
		cont ++;
	}
	return cont;
}


9 - Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':

$ ./ola_num_caracs_1 Eu Mesmo
$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
$ Argumento: Eu / Numero de caracteres: 2
$ Argumento: Mesmo / Numero de caracteres: 5

#include <stdio.h>
#include <stdlib.h>
#include "Num_Caracs.h"

int main(int argc, char **argv){

int i = 0;
for (i=0; i<argc; i++){
	printf ("Argumento: %s / Número de caracteres: %d \n", argv[i], Num_Caracs(argv[i]));
	}
return 0;
}	


10 - Crie um Makefile para a questão anterior.

Num_Caracs: ola_num_caracs_1.o Num_Caracs.o
	gcc $(CFLAGS) -o ola_num_caracs_1 ola_num_caracs_1.o Num_Caracs.o
ola_num_caracs_1.o: ola_num_caracs_1.c Num_Caracs.h
	gcc $(CFLAGS) -c ola_num_caracs_1.c
Num_Caracs.o: Num_Caracs.c Num_Caracs.h
	gcc $(CFLAGS) -c Num_Caracs.c
clean:
	rm -f *.o ola_num_caracs_1


11 - Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':

$ ./ola_num_caracs_2 Eu Mesmo
$ Total de caracteres de entrada: 25

12 - Crie um Makefile para a questão anterior.

